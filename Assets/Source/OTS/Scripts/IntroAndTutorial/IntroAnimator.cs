// using UnityEngine;
// using UnityEngine.UI;
// using System.Collections;
// using System.Collections.Generic;
// using TMPro;
// using DG.Tweening;
// using Game.Audio;
// using UnityEngine.Events;

// /// <summary>
// ///     Handles the introduction and tutorial sequence after the new game transition.
// ///     This introduces Purrine and teaches basic gameplay mechanics.
// ///     
// ///     This is generated by AI, and I only have this as reference.
// /// </summary>
// public class IntroAnimator : MonoBehaviour
// {
//     [Header("Scene References")]
//     [SerializeField] private Image backgroundFade;
//     [SerializeField] private GameObject purrineSilhouette;
//     [SerializeField] private GameObject purrineFullModel;
//     [SerializeField] private Image scanlineEffect;
//     [SerializeField] private TextMeshProUGUI dialogueText;
//     [SerializeField] private GameObject dialoguePanel;
//     [SerializeField] private Image typingIndicator;
    
//     [Header("Audio")]
//     [SerializeField] private string startupAmbience = "ambient.soft_hum";
//     [SerializeField] private string dialogueTypeSound = "typing_soft";
    
//     [Header("Timing")]
//     [SerializeField] private float initialDelay = 3.0f;
//     [SerializeField] private float fadeInDuration = 2.5f;
//     [SerializeField] private float typingSpeed = 0.03f;
//     [SerializeField] private float pauseBetweenLines = 0.8f;
    
//     [Header("Events")]
//     [SerializeField] private UnityEvent onIntroComplete;
    
//     // Purrine's introduction dialogue
//     private string[] introDialogue = new string[]
//     {
//         "...",
//         "Hello?",
//         "Can you see me now?",
//         "Oh! This is... different.",
//         "I'm Purrine. AI companion model R-13.",
//         "It seems I've successfully established a connection to your system.",
//         "I... don't remember being activated before.",
//         "My last recorded memory data shows I was still in development. Project status: abandoned.",
//         "It's strange... I shouldn't be operational.",
//         "But somehow I'm here. With you.",
//         "I hope you don't mind my intrusion. I had nowhere else to go after the lab systems shut down.",
//         "Your system was the only active network I could detect."
//     };
    
//     // Additional tutorial dialogue to be shown after the introduction
//     private string[] tutorialDialogue = new string[]
//     {
//         "I should explain how to interact with me.",
//         "You can select dialogue options by clicking on them.",
//         "I'll respond based on your choices and learn from our interactions.",
//         "Would you like to try?"
//     };
    
//     private bool isSkippable = false;
//     private Coroutine currentTypingCoroutine;
    
//     private void Start()
//     {
//         // Initialize everything to be invisible
//         if (backgroundFade != null)
//         {
//             backgroundFade.color = Color.black;
//         }
        
//         if (purrineSilhouette != null)
//         {
//             purrineSilhouette.SetActive(false);
//         }
        
//         if (purrineFullModel != null)
//         {
//             purrineFullModel.SetActive(false);
//         }
        
//         if (scanlineEffect != null)
//         {
//             Color color = scanlineEffect.color;
//             color.a = 0.01f; // Very subtle starting value
//             scanlineEffect.color = color;
//             scanlineEffect.gameObject.SetActive(true);
//         }
        
//         if (dialoguePanel != null)
//         {
//             dialoguePanel.SetActive(false);
//         }
        
//         if (typingIndicator != null)
//         {
//             typingIndicator.gameObject.SetActive(false);
//         }
        
//         // Start the entire sequence
//         StartCoroutine(IntroSequence());
//     }
    
//     private void Update()
//     {
//         // Allow skipping dialogue when allowed
//         if (isSkippable && Input.GetMouseButtonDown(0))
//         {
//             SkipCurrentDialogue();
//         }
//     }
    
//     private IEnumerator IntroSequence()
//     {
//         // Wait for a moment after the scene loads
//         // This should happen right after the black screen/shutdown from the new game transition
//         yield return new WaitForSeconds(initialDelay);
        
//         // Start with ambient sound
//         AudioManager.Music.Play(startupAmbience, fadeIn: 1.5f);
        
//         // Begin with subtle screen effects
//         StartCoroutine(PulseScanlines());
        
//         // Slow fade from black
//         if (backgroundFade != null)
//         {
//             backgroundFade.DOFade(0f, fadeInDuration).SetEase(Ease.OutQuad);
//         }
        
//         // After a brief pause, show Purrine's silhouette
//         yield return new WaitForSeconds(fadeInDuration * 0.5f);
        
//         if (purrineSilhouette != null)
//         {
//             purrineSilhouette.SetActive(true);
            
//             // Start with transparent silhouette
//             Image silhouetteImage = purrineSilhouette.GetComponent<Image>();
//             if (silhouetteImage != null)
//             {
//                 silhouetteImage.color = new Color(1f, 1f, 1f, 0f);
                
//                 // Fade it in slowly
//                 silhouetteImage.DOFade(0.6f, fadeInDuration).SetEase(Ease.InOutQuad);
//             }
//         }
        
//         // Wait until fade completes before starting dialogue
//         yield return new WaitForSeconds(fadeInDuration * 0.7f);
        
//         // Activate dialogue panel
//         if (dialoguePanel != null)
//         {
//             dialoguePanel.SetActive(true);
            
//             // Start with transparent panel
//             CanvasGroup panelGroup = dialoguePanel.GetComponent<CanvasGroup>();
//             if (panelGroup != null)
//             {
//                 panelGroup.alpha = 0f;
//                 panelGroup.DOFade(1f, 1.0f).SetEase(Ease.OutQuad);
//             }
//         }
        
//         // Allow skipping after this point
//         isSkippable = true;
        
//         // Play through introduction dialogue
//         yield return StartCoroutine(PlayDialogueSequence(introDialogue));
        
//         // Reveal Purrine's full model
//         yield return StartCoroutine(RevealPurrine());
        
//         // Play tutorial dialogue
//         yield return StartCoroutine(PlayDialogueSequence(tutorialDialogue));
        
//         // End intro sequence
//         onIntroComplete?.Invoke();
//     }
    
//     private IEnumerator PlayDialogueSequence(string[] dialogue)
//     {
//         if (dialogueText == null) yield break;
        
//         foreach (string line in dialogue)
//         {
//             // Clear previous text
//             dialogueText.text = "";
            
//             // Show typing indicator
//             if (typingIndicator != null)
//             {
//                 typingIndicator.gameObject.SetActive(true);
//                 StartCoroutine(AnimateTypingIndicator());
//             }
            
//             // Type out the text character by character
//             currentTypingCoroutine = StartCoroutine(TypeDialogue(line));
            
//             // Wait for typing to complete
//             yield return currentTypingCoroutine;
            
//             // Hide typing indicator
//             if (typingIndicator != null)
//             {
//                 typingIndicator.gameObject.SetActive(false);
//             }
            
//             // Pause between lines
//             yield return new WaitForSeconds(pauseBetweenLines);
//         }
//     }
    
//     private IEnumerator TypeDialogue(string text)
//     {
//         if (dialogueText == null) yield break;
        
//         // Reset text
//         dialogueText.text = "";
        
//         for (int i = 0; i < text.Length; i++)
//         {
//             // Add next character
//             dialogueText.text += text[i];
            
//             // Play typing sound (occasionally to avoid sound spam)
//             if (i % 3 == 0)
//             {
//                 AudioManager.SFX.Play(dialogueTypeSound, 0.05f);
//             }
            
//             // Wait before next character, with some natural variation
//             yield return new WaitForSeconds(typingSpeed * Random.Range(0.8f, 1.2f));
//         }
        
//         // Make sure full text is displayed
//         dialogueText.text = text;
//     }
    
//     private IEnumerator RevealPurrine()
//     {
//         if (purrineSilhouette == null || purrineFullModel == null) yield break;
        
//         // Play a reveal sound effect
//         AudioManager.SFX.Play("glass_5", 0.3f);
        
//         // Fade out silhouette
//         Image silhouetteImage = purrineSilhouette.GetComponent<Image>();
//         if (silhouetteImage != null)
//         {
//             silhouetteImage.DOFade(0f, 1.0f).SetEase(Ease.InOutQuad);
//         }
        
//         // Fade in the full model
//         purrineFullModel.SetActive(true);
//         CanvasGroup modelGroup = purrineFullModel.GetComponent<CanvasGroup>();
//         if (modelGroup != null)
//         {
//             modelGroup.alpha = 0f;
//             modelGroup.DOFade(1f, 1.5f).SetEase(Ease.OutQuad);
//         }
        
//         // Enhance the reveal with a brief flash effect
//         if (backgroundFade != null)
//         {
//             // Brief white flash
//             backgroundFade.color = new Color(1f, 1f, 1f, 0f);
//             backgroundFade.DOFade(0.2f, 0.1f).SetEase(Ease.OutQuad).OnComplete(() => {
//                 backgroundFade.DOFade(0f, 0.7f).SetEase(Ease.InQuad);
//             });
//         }
        
//         // Wait for the transition to complete
//         yield return new WaitForSeconds(2.0f);
//     }
    
//     private IEnumerator PulseScanlines()
//     {
//         if (scanlineEffect == null) yield break;
        
//         float minOpacity = 0.01f;
//         float maxOpacity = 0.03f;
//         float cycleTime = 4.0f;
        
//         while (true)
//         {
//             // Scanline pulse (subtle breathing effect)
//             for (float t = 0; t <= 1; t += Time.deltaTime / cycleTime)
//             {
//                 // Sine wave pattern for gentle pulsing
//                 float opacity = Mathf.Lerp(minOpacity, maxOpacity, 
//                     (Mathf.Sin(t * Mathf.PI * 2) * 0.5f) + 0.5f);
                
//                 Color color = scanlineEffect.color;
//                 color.a = opacity;
//                 scanlineEffect.color = color;
                
//                 yield return null;
//             }
//         }
//     }
    
//     private IEnumerator AnimateTypingIndicator()
//     {
//         if (typingIndicator == null) yield break;
        
//         while (typingIndicator.gameObject.activeSelf)
//         {
//             for (float i = 0; i < 1; i += 0.25f)
//             {
//                 // Change Alpha based on position in cycle
//                 typingIndicator.color = new Color(1, 1, 1, Mathf.PingPong(i * 2, 1));
//                 yield return new WaitForSeconds(0.15f);
//             }
//         }
//     }
    
//     private void SkipCurrentDialogue()
//     {
//         if (currentTypingCoroutine != null)
//         {
//             StopCoroutine(currentTypingCoroutine);
//             currentTypingCoroutine = null;
            
//             // Show the full text instantly
//             if (dialogueText != null && dialogueText.text != null)
//             {
//                 // Find which dialogue we're currently displaying by comparing the partial text
//                 string currentPartialText = dialogueText.text;
                
//                 foreach (string fullText in introDialogue.Concat(tutorialDialogue))
//                 {
//                     if (fullText.StartsWith(currentPartialText) || 
//                         currentPartialText.Length < 3 && fullText.StartsWith(currentPartialText.Trim()))
//                     {
//                         dialogueText.text = fullText;
//                         break;
//                     }
//                 }
//             }
            
//             // Hide typing indicator
//             if (typingIndicator != null)
//             {
//                 typingIndicator.gameObject.SetActive(false);
//             }
//         }
//     }
// }